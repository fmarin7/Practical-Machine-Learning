3+2
x<-[1 2 3]
x<-(1 2 3)
x<-c(1 2 3)
x =11
print(x)
puts(x)
x <- 11
y <- 2x^2
y <- 2*x^2
rm(x)
x <- c(1 2 3)
x <- c(1, 2, 3)
x
y = 1:5
seq(from=1, to=5, by=0.5)
rep(2, times=5)
mat = matrix(c(1,2 3 4), nrwo=2, byrow=TRUE)
mat = matrix(c(1,2, 3, 4), nrwo=2, byrow=TRUE)
mat = matrix(c(1,2, 3, 4), nrow = =2, byrow=TRUE)
mat <- matrix(c(1,2, 3, 4), nrow = =2, byrow=TRUE)
mat = matrix(c(1,2, 3, 4), nrow=2, byrow=TRUE)
mat
mat = matrix(c(1,2, 3, 4), nrow=2, byrow=FALSE)
mat
# Marketing Graduate GPAx= [3.26, 2.6, 3.35, 2.86, 3.82, 2.21, 3.47]
clear
# Marketing Graduate GPA
x <- c(3.26, 2.6, 3.35, 2.86, 3.82, 2.21, 3.47)
x <- c(3.26, 2.6, 3.35, 2.86, 3.82, 2.21, 3.47)
x <- c(3.26, 2.6, 3.35, 2.86, 3.82, 2.21, 3.47);
print(xy)
print(xy)
xy <- x * y
# Marketing Graduate GPA
x <- c(3.26, 2.6, 3.35, 2.86, 3.82, 2.21, 3.47)
# Starting Salary (x $1,000)
y <- c(33.8, 29.8, 33.5, 30.4, 36.4, 27.6, 35.3)
xy <- x * y
print(xy)
sumx <- sum(x)
sumy = sum(y)
sumxy = sum(xy)
xsqr = x * x
sumxsqr = sum(xsqr)
SSxy = sum(xy)-((sumx)(sumy))/length(x)
SSxy = sum(xy)-((sumx)(sumy))/7
SSxy = sumxy-((sumx)(sumy))/7
SSxy = sum(xy)-((sum(x)(sum(y))/7
;
ssxy = sumxy-(sumx)(sumy)/length(x)
lx = length(x)
ssxy = sumxy - (sumx * sumy) / lx
ssxx = sumxsqr - (sumx * sumx) / lx
b1 = ssxy / ssxx
xbar = mean(x)
ybar = mean(y)
b0 = ybar - b1 * xbar
save.image("C:/Users/fmarin/Downloads/Classes/Math 400/HWE3-3.r.RData")
load("C:/Users/fmarin/Downloads/Classes/Math 400/HWE3-3.r.RData")
plot(Y,X1,xlab='Age of Property',ylab="Rental Rates",type='p',main='scatterplot of rental rates vs. age of property')
Commercial_Property <- read.delim("C:/Users/fmarin/Downloads/Classes/Math 484/Math484Midterm/Commercial_Property.xls")
View(Commercial_Property)
plot(Y,X1,xlab='Age of Property',ylab="Rental Rates",type='p',main='scatterplot of rental rates vs. age of property')
plot(Y,X1,xlab='Age of Property',ylab="Rental Rates",type='p',main='scatterplot of rental rates vs. age of property')
View(Commercial_Property)
View(Commercial_Property)
commercialproperties<-read.table('Commercial_Property.xls', header=T,sep=',')
anova(model2, model1)
model2<-lm(Y~X1+X2+X4,data=Commercial_Property)
model1<-lm(Y~X1+X2+X3+X4,data=Commercial_Property)
model3<-lm(Y~X1+X2+X4+I(X1^2))
model3<-lm(Y~X1+X2+X4+I(X1^2))
model3
anova(model2, model1)
model3<-lm(Y~X1+X2+X$+I(X1^2))
model3<-lm(Y~X1+X2+X4+I(X1^2))
model3<-lm(Y~X1+X2+X4+I(X1^2), data=Commercial_Property)
anova(model1, model2)
plot(Y, model3$fitted.values)
plot(Y, data=Commercial_Property, model1$residuals)
plot(Commercial_Property(Y), model3$fitted.values)
plot(Y, model3$residuals, type='p')
summary(model3)
plot(fitted(model1), model3)
plot(fitted(model1), model3$residuals)
anova(model2, model3)
pairs(~Y+X1+X2+X3+X4, data=Commercial_Property, main="Simple Scatterplot Matrix")
install.packages("randomForest")
library(party)
install.packages(party)
install.packages("party")
install.packages("randomForest")
library(party)
library(randomForest)
Commercial_Property<-read.table('Commercial_Property.xls', header=T,sep=',')
attach(Commercial_Property)
a <- available.packages()
head(row.names(a),3)
x = 4
y = pi
x*y
(x*y)^2
slidify?
help(slidify)
install.packages("slidify")
instal.packages("installr"); library(installr)
install.packages("installr"); library(installr)
updateR()
updateR()
R.Version()
find.package("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
getwd()
getwd()
getwd()
getwd()
source('C:/Users/fmarin/myprojects/cachematrix.R')
source('C:/Users/fmarin/myprojects/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
## to Set value of matrix:
setMatrixVal <- function(y){
x <<- y
invMatrix <<- NULL
}
## To get value of matrix
getMatrixVal <- function()x
## To set value of inverse matrix
setInverseVal <- function(inverse) invMatrix <<- inverse
## To get value of inverse matrix
getInverseVal <- function() invMatrix
list(setMatrixval = setMatrixVal, getMatrixVal = getMatrixVal,
setInverseVal = setInverseVal, getInverseVal = getInverseVal)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseVal()
if(!is.null(invMatrix)){
message("Getting cached inversible matrix")
return(invMatrix)
}
matrixData <- x$getMatrixVal()
invMatrix <- solve(matrixData, ...)
x$setInverseVal(invMatrix)
return(invMatrix)
}
TestMatrix <- matrix(1:4, 2, 2)
TestMatrix
cacheMatrix <- makeCacheMatrix(TestMatrix)
cacheMatrix$getMatrixVal()
cacheMatrix$setInverseVal()
cacheMatrix$getInverseVal()
cacheSolve(cacheMatrix)
TestMatrix <- matrix(1:9, 3, 3)
TestMatrix
cacheMatrix <- makeCacheMatrix(TestMatrix)
cacheMatrix$getMatrixVal()
cacheMatrix$getInverseVal()
matrix1 <- matrix(10:13, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheMatrix$getMatrixVal()
cacheMatrix$getInverseVal()
cacheSolve(cacheMatrix)
matrix1 <- matrix(1:4, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheMatrix$getMatrixVal()
cacheMatrix$getInverseVal()
cacheSolve(cacheMatrix)
matrix1 <- matrix(1:4, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheSolve(cacheMatrix)
matrix2 <- matrix(1:9, 3, 3)
cacheMatrix <- makeCacheMatrix(matrix2)
cacheSolve(cacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
## to Set value of matrix:
setMatrixVal <- function(y){
x <<- y
invMatrix <<- NULL
}
## To get value of matrix
##getMatrixVal <- function()x
## To set value of inverse matrix
setInverseVal <- function(inverse) invMatrix <<- inverse
## To get value of inverse matrix
## getInverseVal <- function() invMatrix
## list(setMatrixval = setMatrixVal, getMatrixVal = getMatrixVal,
##     setInverseVal = setInverseVal, getInverseVal = getInverseVal)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseVal()
if(!is.null(invMatrix)){
message("Getting cached inversible matrix")
return(invMatrix)
}
matrixData <- x$getMatrixVal()
invMatrix <- solve(matrixData, ...)
x$setInverseVal(invMatrix)
return(invMatrix)
}
matrix1 <- matrix(1:4, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheSolve(cacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
## to Set value of matrix:
setMatrixVal <- function(y){
x <<- y
invMatrix <<- NULL
}
## To get value of matrix
getMatrixVal <- function()x
## To set value of inverse matrix
setInverseVal <- function(inverse) invMatrix <<- inverse
## To get value of inverse matrix
## getInverseVal <- function() invMatrix
## list(setMatrixval = setMatrixVal, getMatrixVal = getMatrixVal,
##     setInverseVal = setInverseVal, getInverseVal = getInverseVal)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseVal()
if(!is.null(invMatrix)){
message("Getting cached inversible matrix")
return(invMatrix)
}
matrixData <- x$getMatrixVal()
invMatrix <- solve(matrixData, ...)
x$setInverseVal(invMatrix)
return(invMatrix)
}
matrix1 <- matrix(1:4, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheSolve(cacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
## to Set value of matrix:
setMatrixVal <- function(y){
x <<- y
invMatrix <<- NULL
}
## To get value of matrix
getMatrixVal <- function()x
## To set value of inverse matrix
setInverseVal <- function(inverse) invMatrix <<- inverse
## To get value of inverse matrix
getInverseVal <- function() invMatrix
list(setMatrixval = setMatrixVal, getMatrixVal = getMatrixVal,
setInverseVal = setInverseVal, getInverseVal = getInverseVal)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseVal()
if(!is.null(invMatrix)){
message("Getting cached inversible matrix")
return(invMatrix)
}
matrixData <- x$getMatrixVal()
invMatrix <- solve(matrixData, ...)
x$setInverseVal(invMatrix)
return(invMatrix)
}
matrix1 <- matrix(1:4, 2, 2)
matrix1
cacheMatrix <- makeCacheMatrix(matrix1)
cacheSolve(cacheMatrix)
matrix2 <- matrix(1:9, 3, 3)
cacheMatrix <- makeCacheMatrix(matrix2)
cacheSolve(cacheMatrix)
matrix2 <- matrix(9:1, 3, 3)
cacheMatrix <- makeCacheMatrix(matrix2)
cacheSolve(cacheMatrix)
matrix2 <- matrix(1:16, 4, 4)
cacheMatrix <- makeCacheMatrix(matrix2)
cacheSolve(cacheMatrix)
matrix2 <- matrix(c(2, 10, 5, 14), 2, 2)
cacheMatrix <- makeCacheMatrix(matrix2)
cacheSolve(cacheMatrix)
source('C:/Users/fmarin/myprojects/cachematrix.R')
remove.packages("rJava")
install.packages("rJava")
library(rJava)
q()
remove.packages("rJava")
remove.packages("xlsxjars")
remove.packages("xlsx")
install.packages("rJava")
library(rJava)
source('~/R Programs/Getting and Cleaning Data/Week 1 Quiz.R')
remove.packages("rJava", "xlsx", "xlsxjars")
remove.packages("rJava", "xlsx")
remove.packages("xlsx")
R.version
library(rJava)
install.packages("rJava")
library(rJava)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "43f00eaa2f29049b6669", secret = "3a0758cae476f6f4b6629a2e8541a95257f5198d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
install.packages("sqldf")
q()
q()
q()
install.packages("shiny")
?shiny
library(shiny)
?shiny
install.packages("shinythemes")
?readr
install.packages("readr")
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
1 /sqrt(n)
library(swirl)
rm(list = ls())
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr*PDF)
ex2_fair <- sum(dice_sqr*pdf)
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
sum(edh^2-3.5^2)
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000), 1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(4)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
install.packages("ISLR")
library(Hmisc)
args(qplot)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select = c(logwag))
Wage <- subset(Wage, select = c(logwage))
summary(Wage)
head(Wage)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(Hmisc)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(rattle)
install.packages("rattle")
library(tree)
install.packages("tree")
install.packages("ElemStatLearn")
library(pgmm)
install.packages(pgmm)
install.packages("pgmm")
setwd("~/R Programs/Practical Machine Learning")
